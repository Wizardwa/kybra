type KeywordRecord = record {
  as : null;
  if : bool;
  in : bool;
  is : float64;
  or : WithRecord;
  and : int;
  def : int32;
  del : int64;
  for : bool;
  not : SimpleRecord;
  try : bool;
  "import" : float32;
  return : bool;
  nonlocal : text;
  finally : nat16;
  async : reserved;
  await : vec nat;
  continue : vec int16;
  None : record { bool; bool };
  True : text;
  elif : nat;
  else : opt bool;
  from : nat32;
  class : int16;
  pass : KeywordVariant;
  assert : int8;
  with : principal;
  lambda : opt text;
  False : bool;
  global : nat64;
  break : opt vec nat8;
  except : nat8;
  while : bool;
  raise : vec nat8;
  yield : bool;
};
type KeywordVariant = variant {
  is;
  or;
  and;
  def;
  del;
  not;
  "import";
  nonlocal;
  finally;
  True;
  elif;
  from;
  class;
  pass;
  assert;
  with;
  lambda;
  False;
  global;
  except;
  raise;
};
type SimpleRecord = record { from : text };
type WithRecord = record {
  with__ : bool;
  with___ : bool;
  with_______________________________________________________________________ : bool;
  with_ : bool;
  with______1 : bool;
};
service : () -> {
  complex_keyword : () -> (KeywordRecord) query;
  keyword_variant : (KeywordVariant) -> (KeywordVariant) query;
  simple_keyword : (SimpleRecord) -> (SimpleRecord) query;
}